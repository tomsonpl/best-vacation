import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import axios from 'axios'
import type { RootState } from '../../app/store'
import { WeatherResponse } from '../../mocks/types'

// here we are typing the types for the state
export type WeatherListState = {
  data: WeatherResponse[] | null
  pending: boolean
  error: boolean
}

const initialState: WeatherListState = {
  data: null,
  pending: false,
  error: false,
}

// This action is what we will call using the dispatch in order to trigger the API call.
export const getWeatherList = createAsyncThunk(
  'weather/weatherList',
  async (city: string) => {
    const response = await axios.get(
      `https://api.weatherbit.io/v2.0/forecast/daily?city=${city}&country=Polska&days=14&key=${process.env.NEXT_PUBLIC_WEATHER_API_KEY}`
    )
    return response.data
  }
)

export const weatherListSlice = createSlice({
  name: 'weatherList',
  initialState,
  reducers: {
    // leave this empty here
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  // Since this is an API call we have 3 possible outcomes: pending, fulfilled and rejected. We have made allocations for all 3 outcomes.
  // Doing this is good practice as we can tap into the status of the API call and give our users an idea of what's happening in the background.
  extraReducers: (builder) => {
    console.log({ builder })
    builder
      .addCase(getWeatherList.pending, (state) => {
        state.pending = true
      })
      .addCase(getWeatherList.fulfilled, (state, { payload }) => {
        // When the API call is successful and we get some data,the data becomes the `fulfilled` action payload
        state.pending = false
        state.data = [payload]
      })
      .addCase(getWeatherList.rejected, (state) => {
        state.pending = false
        state.error = true
      })
  },
})

export const selectWeatherList = (state: RootState) => state.weatherList

export default weatherListSlice.reducer
